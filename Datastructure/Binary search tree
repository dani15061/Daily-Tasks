#insertion
class Node:
    def _init_(self, key):
        self.left = None
        self.right = None
        self.val = key
 
def insert(root, key):
    if root is None:
        return Node(key)
    else:
        if root.val == key:
            return root
        elif root.val < key:
            root.right = insert(root.right, key)
        else:
            root.left = insert(root.left, key)
    return root
 
def inorder(root):
    if root:
        inorder(root.left)
        print(root.val, end=" ")
        inorder(root.right)
 
r = Node(50)
r = insert(r, 30)
r = insert(r, 20)
r = insert(r, 40)
r = insert(r, 70)
r = insert(r, 60)
r = insert(r, 80)
inorder(r)
'''
#searching
class Node:
    def _init_(self, key):
        self.key = key
        self.left = None
        self.right = None
    def insert(node, key):
        if node is None:
            return Node(key)
        if key < node.key:
            node.left = insert(node.left, key)
        elif key > node.key:
            node.right = insert(node.right, key)
        return node
    def search(root, key):
        if root is None or root.key == key:
            return root
        if root.key < key:
            return search(root.right, key)
        return search(root.left, key)

root = None
root = insert(root, 50)
insert(root, 30)
insert(root, 20)
insert(root, 40)
insert(root, 70)
insert(root, 60)
insert(root, 80)
key = 6
if search(root, key) is None:
    print(key, "not found")
else:
    print(key, "found")
key = 60
if search(root, key) is None:
    print(key, "not found")
else:
    print(key, "found")

    
#traversal
class Node:
    def _init_(self, v):
        self.left = None
        self.right = None
        self.data = v
    def printInorder(root):
        if root:
            printInorder(root.left)
            print(root.data,end=" ")
            printInorder(root.right)
    def printPreOrder(node):
        if node is None:
            return
        print(node.data, end = " ")
        printPreOrder(node.left)
        printPreOrder(node.right)
    def printPostOrder(node):
        if node is None:
            return
        printPostOrder(node.left)
        printPostOrder(node.right)
        print(node.data, end = " ")

   
root = Node(100)
root.left = Node(20)
root.right = Node(200)
root.left.left = Node(10)
root.left.right = Node(30)
root.right.left = Node(150)
root.right.right = Node(300)
print("Inorder Traversal:",end=" ")
printInorder(root)
print("Preorder Traversal: ", end = "")
printPreOrder(root)
print("Postorder Traversal: ", end = "")
printPostOrder(root)
'''
